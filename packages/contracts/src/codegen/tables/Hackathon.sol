// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("Hackathon")));
bytes32 constant HackathonTableId = _tableId;

struct HackathonData {
  address owner;
  address prizeToken;
  uint8 phase;
  uint256 startTimestamp;
  uint256 submitPeriod;
  uint256 votingPeriod;
  uint256 withdrawalPeriod;
  uint8 winnerCount;
}

library Hackathon {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](8);
    _schema[0] = SchemaType.ADDRESS;
    _schema[1] = SchemaType.ADDRESS;
    _schema[2] = SchemaType.UINT8;
    _schema[3] = SchemaType.UINT256;
    _schema[4] = SchemaType.UINT256;
    _schema[5] = SchemaType.UINT256;
    _schema[6] = SchemaType.UINT256;
    _schema[7] = SchemaType.UINT8;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](8);
    _fieldNames[0] = "owner";
    _fieldNames[1] = "prizeToken";
    _fieldNames[2] = "phase";
    _fieldNames[3] = "startTimestamp";
    _fieldNames[4] = "submitPeriod";
    _fieldNames[5] = "votingPeriod";
    _fieldNames[6] = "withdrawalPeriod";
    _fieldNames[7] = "winnerCount";
    return ("Hackathon", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get owner */
  function getOwner(bytes32 key) internal view returns (address owner) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Get owner (using the specified store) */
  function getOwner(IStore _store, bytes32 key) internal view returns (address owner) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Set owner */
  function setOwner(bytes32 key, address owner) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((owner)));
  }

  /** Set owner (using the specified store) */
  function setOwner(IStore _store, bytes32 key, address owner) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((owner)));
  }

  /** Get prizeToken */
  function getPrizeToken(bytes32 key) internal view returns (address prizeToken) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Get prizeToken (using the specified store) */
  function getPrizeToken(IStore _store, bytes32 key) internal view returns (address prizeToken) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Set prizeToken */
  function setPrizeToken(bytes32 key, address prizeToken) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((prizeToken)));
  }

  /** Set prizeToken (using the specified store) */
  function setPrizeToken(IStore _store, bytes32 key, address prizeToken) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((prizeToken)));
  }

  /** Get phase */
  function getPhase(bytes32 key) internal view returns (uint8 phase) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get phase (using the specified store) */
  function getPhase(IStore _store, bytes32 key) internal view returns (uint8 phase) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set phase */
  function setPhase(bytes32 key, uint8 phase) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((phase)));
  }

  /** Set phase (using the specified store) */
  function setPhase(IStore _store, bytes32 key, uint8 phase) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((phase)));
  }

  /** Get startTimestamp */
  function getStartTimestamp(bytes32 key) internal view returns (uint256 startTimestamp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get startTimestamp (using the specified store) */
  function getStartTimestamp(IStore _store, bytes32 key) internal view returns (uint256 startTimestamp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set startTimestamp */
  function setStartTimestamp(bytes32 key, uint256 startTimestamp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 3, abi.encodePacked((startTimestamp)));
  }

  /** Set startTimestamp (using the specified store) */
  function setStartTimestamp(IStore _store, bytes32 key, uint256 startTimestamp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 3, abi.encodePacked((startTimestamp)));
  }

  /** Get submitPeriod */
  function getSubmitPeriod(bytes32 key) internal view returns (uint256 submitPeriod) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 4);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get submitPeriod (using the specified store) */
  function getSubmitPeriod(IStore _store, bytes32 key) internal view returns (uint256 submitPeriod) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 4);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set submitPeriod */
  function setSubmitPeriod(bytes32 key, uint256 submitPeriod) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 4, abi.encodePacked((submitPeriod)));
  }

  /** Set submitPeriod (using the specified store) */
  function setSubmitPeriod(IStore _store, bytes32 key, uint256 submitPeriod) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 4, abi.encodePacked((submitPeriod)));
  }

  /** Get votingPeriod */
  function getVotingPeriod(bytes32 key) internal view returns (uint256 votingPeriod) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 5);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get votingPeriod (using the specified store) */
  function getVotingPeriod(IStore _store, bytes32 key) internal view returns (uint256 votingPeriod) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 5);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set votingPeriod */
  function setVotingPeriod(bytes32 key, uint256 votingPeriod) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 5, abi.encodePacked((votingPeriod)));
  }

  /** Set votingPeriod (using the specified store) */
  function setVotingPeriod(IStore _store, bytes32 key, uint256 votingPeriod) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 5, abi.encodePacked((votingPeriod)));
  }

  /** Get withdrawalPeriod */
  function getWithdrawalPeriod(bytes32 key) internal view returns (uint256 withdrawalPeriod) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 6);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get withdrawalPeriod (using the specified store) */
  function getWithdrawalPeriod(IStore _store, bytes32 key) internal view returns (uint256 withdrawalPeriod) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 6);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set withdrawalPeriod */
  function setWithdrawalPeriod(bytes32 key, uint256 withdrawalPeriod) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 6, abi.encodePacked((withdrawalPeriod)));
  }

  /** Set withdrawalPeriod (using the specified store) */
  function setWithdrawalPeriod(IStore _store, bytes32 key, uint256 withdrawalPeriod) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 6, abi.encodePacked((withdrawalPeriod)));
  }

  /** Get winnerCount */
  function getWinnerCount(bytes32 key) internal view returns (uint8 winnerCount) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 7);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get winnerCount (using the specified store) */
  function getWinnerCount(IStore _store, bytes32 key) internal view returns (uint8 winnerCount) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 7);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set winnerCount */
  function setWinnerCount(bytes32 key, uint8 winnerCount) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 7, abi.encodePacked((winnerCount)));
  }

  /** Set winnerCount (using the specified store) */
  function setWinnerCount(IStore _store, bytes32 key, uint8 winnerCount) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 7, abi.encodePacked((winnerCount)));
  }

  /** Get the full data */
  function get(bytes32 key) internal view returns (HackathonData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, bytes32 key) internal view returns (HackathonData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    bytes32 key,
    address owner,
    address prizeToken,
    uint8 phase,
    uint256 startTimestamp,
    uint256 submitPeriod,
    uint256 votingPeriod,
    uint256 withdrawalPeriod,
    uint8 winnerCount
  ) internal {
    bytes memory _data = encode(
      owner,
      prizeToken,
      phase,
      startTimestamp,
      submitPeriod,
      votingPeriod,
      withdrawalPeriod,
      winnerCount
    );

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 key,
    address owner,
    address prizeToken,
    uint8 phase,
    uint256 startTimestamp,
    uint256 submitPeriod,
    uint256 votingPeriod,
    uint256 withdrawalPeriod,
    uint8 winnerCount
  ) internal {
    bytes memory _data = encode(
      owner,
      prizeToken,
      phase,
      startTimestamp,
      submitPeriod,
      votingPeriod,
      withdrawalPeriod,
      winnerCount
    );

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(bytes32 key, HackathonData memory _table) internal {
    set(
      key,
      _table.owner,
      _table.prizeToken,
      _table.phase,
      _table.startTimestamp,
      _table.submitPeriod,
      _table.votingPeriod,
      _table.withdrawalPeriod,
      _table.winnerCount
    );
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 key, HackathonData memory _table) internal {
    set(
      _store,
      key,
      _table.owner,
      _table.prizeToken,
      _table.phase,
      _table.startTimestamp,
      _table.submitPeriod,
      _table.votingPeriod,
      _table.withdrawalPeriod,
      _table.winnerCount
    );
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (HackathonData memory _table) {
    _table.owner = (address(Bytes.slice20(_blob, 0)));

    _table.prizeToken = (address(Bytes.slice20(_blob, 20)));

    _table.phase = (uint8(Bytes.slice1(_blob, 40)));

    _table.startTimestamp = (uint256(Bytes.slice32(_blob, 41)));

    _table.submitPeriod = (uint256(Bytes.slice32(_blob, 73)));

    _table.votingPeriod = (uint256(Bytes.slice32(_blob, 105)));

    _table.withdrawalPeriod = (uint256(Bytes.slice32(_blob, 137)));

    _table.winnerCount = (uint8(Bytes.slice1(_blob, 169)));
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    address owner,
    address prizeToken,
    uint8 phase,
    uint256 startTimestamp,
    uint256 submitPeriod,
    uint256 votingPeriod,
    uint256 withdrawalPeriod,
    uint8 winnerCount
  ) internal view returns (bytes memory) {
    return
      abi.encodePacked(
        owner,
        prizeToken,
        phase,
        startTimestamp,
        submitPeriod,
        votingPeriod,
        withdrawalPeriod,
        winnerCount
      );
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(bytes32 key) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.deleteRecord(_tableId, _keyTuple);
  }
}
