// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("Submission")));
bytes32 constant SubmissionTableId = _tableId;

struct SubmissionData {
  uint256 votes;
  uint256 withdrawalPrize;
  string name;
  string uri;
  string imageUri;
}

library Submission {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](5);
    _schema[0] = SchemaType.UINT256;
    _schema[1] = SchemaType.UINT256;
    _schema[2] = SchemaType.STRING;
    _schema[3] = SchemaType.STRING;
    _schema[4] = SchemaType.STRING;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](2);
    _schema[0] = SchemaType.BYTES32;
    _schema[1] = SchemaType.ADDRESS;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](5);
    _fieldNames[0] = "votes";
    _fieldNames[1] = "withdrawalPrize";
    _fieldNames[2] = "name";
    _fieldNames[3] = "uri";
    _fieldNames[4] = "imageUri";
    return ("Submission", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get votes */
  function getVotes(bytes32 hackathonId, address submitter) internal view returns (uint256 votes) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get votes (using the specified store) */
  function getVotes(IStore _store, bytes32 hackathonId, address submitter) internal view returns (uint256 votes) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set votes */
  function setVotes(bytes32 hackathonId, address submitter, uint256 votes) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((votes)));
  }

  /** Set votes (using the specified store) */
  function setVotes(IStore _store, bytes32 hackathonId, address submitter, uint256 votes) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((votes)));
  }

  /** Get withdrawalPrize */
  function getWithdrawalPrize(bytes32 hackathonId, address submitter) internal view returns (uint256 withdrawalPrize) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get withdrawalPrize (using the specified store) */
  function getWithdrawalPrize(
    IStore _store,
    bytes32 hackathonId,
    address submitter
  ) internal view returns (uint256 withdrawalPrize) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set withdrawalPrize */
  function setWithdrawalPrize(bytes32 hackathonId, address submitter, uint256 withdrawalPrize) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((withdrawalPrize)));
  }

  /** Set withdrawalPrize (using the specified store) */
  function setWithdrawalPrize(IStore _store, bytes32 hackathonId, address submitter, uint256 withdrawalPrize) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((withdrawalPrize)));
  }

  /** Get name */
  function getName(bytes32 hackathonId, address submitter) internal view returns (string memory name) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (string(_blob));
  }

  /** Get name (using the specified store) */
  function getName(IStore _store, bytes32 hackathonId, address submitter) internal view returns (string memory name) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (string(_blob));
  }

  /** Set name */
  function setName(bytes32 hackathonId, address submitter, string memory name) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    StoreSwitch.setField(_tableId, _keyTuple, 2, bytes((name)));
  }

  /** Set name (using the specified store) */
  function setName(IStore _store, bytes32 hackathonId, address submitter, string memory name) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    _store.setField(_tableId, _keyTuple, 2, bytes((name)));
  }

  /** Get the length of name */
  function lengthName(bytes32 hackathonId, address submitter) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 2, getSchema());
    return _byteLength / 1;
  }

  /** Get the length of name (using the specified store) */
  function lengthName(IStore _store, bytes32 hackathonId, address submitter) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 2, getSchema());
    return _byteLength / 1;
  }

  /** Get an item of name (unchecked, returns invalid data if index overflows) */
  function getItemName(bytes32 hackathonId, address submitter, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 2, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Get an item of name (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemName(
    IStore _store,
    bytes32 hackathonId,
    address submitter,
    uint256 _index
  ) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 2, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Push a slice to name */
  function pushName(bytes32 hackathonId, address submitter, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    StoreSwitch.pushToField(_tableId, _keyTuple, 2, bytes((_slice)));
  }

  /** Push a slice to name (using the specified store) */
  function pushName(IStore _store, bytes32 hackathonId, address submitter, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    _store.pushToField(_tableId, _keyTuple, 2, bytes((_slice)));
  }

  /** Pop a slice from name */
  function popName(bytes32 hackathonId, address submitter) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    StoreSwitch.popFromField(_tableId, _keyTuple, 2, 1);
  }

  /** Pop a slice from name (using the specified store) */
  function popName(IStore _store, bytes32 hackathonId, address submitter) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    _store.popFromField(_tableId, _keyTuple, 2, 1);
  }

  /** Update a slice of name at `_index` */
  function updateName(bytes32 hackathonId, address submitter, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    StoreSwitch.updateInField(_tableId, _keyTuple, 2, _index * 1, bytes((_slice)));
  }

  /** Update a slice of name (using the specified store) at `_index` */
  function updateName(
    IStore _store,
    bytes32 hackathonId,
    address submitter,
    uint256 _index,
    string memory _slice
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    _store.updateInField(_tableId, _keyTuple, 2, _index * 1, bytes((_slice)));
  }

  /** Get uri */
  function getUri(bytes32 hackathonId, address submitter) internal view returns (string memory uri) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3);
    return (string(_blob));
  }

  /** Get uri (using the specified store) */
  function getUri(IStore _store, bytes32 hackathonId, address submitter) internal view returns (string memory uri) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3);
    return (string(_blob));
  }

  /** Set uri */
  function setUri(bytes32 hackathonId, address submitter, string memory uri) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    StoreSwitch.setField(_tableId, _keyTuple, 3, bytes((uri)));
  }

  /** Set uri (using the specified store) */
  function setUri(IStore _store, bytes32 hackathonId, address submitter, string memory uri) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    _store.setField(_tableId, _keyTuple, 3, bytes((uri)));
  }

  /** Get the length of uri */
  function lengthUri(bytes32 hackathonId, address submitter) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 3, getSchema());
    return _byteLength / 1;
  }

  /** Get the length of uri (using the specified store) */
  function lengthUri(IStore _store, bytes32 hackathonId, address submitter) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 3, getSchema());
    return _byteLength / 1;
  }

  /** Get an item of uri (unchecked, returns invalid data if index overflows) */
  function getItemUri(bytes32 hackathonId, address submitter, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 3, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Get an item of uri (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemUri(
    IStore _store,
    bytes32 hackathonId,
    address submitter,
    uint256 _index
  ) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 3, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Push a slice to uri */
  function pushUri(bytes32 hackathonId, address submitter, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    StoreSwitch.pushToField(_tableId, _keyTuple, 3, bytes((_slice)));
  }

  /** Push a slice to uri (using the specified store) */
  function pushUri(IStore _store, bytes32 hackathonId, address submitter, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    _store.pushToField(_tableId, _keyTuple, 3, bytes((_slice)));
  }

  /** Pop a slice from uri */
  function popUri(bytes32 hackathonId, address submitter) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    StoreSwitch.popFromField(_tableId, _keyTuple, 3, 1);
  }

  /** Pop a slice from uri (using the specified store) */
  function popUri(IStore _store, bytes32 hackathonId, address submitter) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    _store.popFromField(_tableId, _keyTuple, 3, 1);
  }

  /** Update a slice of uri at `_index` */
  function updateUri(bytes32 hackathonId, address submitter, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    StoreSwitch.updateInField(_tableId, _keyTuple, 3, _index * 1, bytes((_slice)));
  }

  /** Update a slice of uri (using the specified store) at `_index` */
  function updateUri(
    IStore _store,
    bytes32 hackathonId,
    address submitter,
    uint256 _index,
    string memory _slice
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    _store.updateInField(_tableId, _keyTuple, 3, _index * 1, bytes((_slice)));
  }

  /** Get imageUri */
  function getImageUri(bytes32 hackathonId, address submitter) internal view returns (string memory imageUri) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 4);
    return (string(_blob));
  }

  /** Get imageUri (using the specified store) */
  function getImageUri(
    IStore _store,
    bytes32 hackathonId,
    address submitter
  ) internal view returns (string memory imageUri) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 4);
    return (string(_blob));
  }

  /** Set imageUri */
  function setImageUri(bytes32 hackathonId, address submitter, string memory imageUri) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    StoreSwitch.setField(_tableId, _keyTuple, 4, bytes((imageUri)));
  }

  /** Set imageUri (using the specified store) */
  function setImageUri(IStore _store, bytes32 hackathonId, address submitter, string memory imageUri) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    _store.setField(_tableId, _keyTuple, 4, bytes((imageUri)));
  }

  /** Get the length of imageUri */
  function lengthImageUri(bytes32 hackathonId, address submitter) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 4, getSchema());
    return _byteLength / 1;
  }

  /** Get the length of imageUri (using the specified store) */
  function lengthImageUri(IStore _store, bytes32 hackathonId, address submitter) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 4, getSchema());
    return _byteLength / 1;
  }

  /** Get an item of imageUri (unchecked, returns invalid data if index overflows) */
  function getItemImageUri(
    bytes32 hackathonId,
    address submitter,
    uint256 _index
  ) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 4, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Get an item of imageUri (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemImageUri(
    IStore _store,
    bytes32 hackathonId,
    address submitter,
    uint256 _index
  ) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 4, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Push a slice to imageUri */
  function pushImageUri(bytes32 hackathonId, address submitter, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    StoreSwitch.pushToField(_tableId, _keyTuple, 4, bytes((_slice)));
  }

  /** Push a slice to imageUri (using the specified store) */
  function pushImageUri(IStore _store, bytes32 hackathonId, address submitter, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    _store.pushToField(_tableId, _keyTuple, 4, bytes((_slice)));
  }

  /** Pop a slice from imageUri */
  function popImageUri(bytes32 hackathonId, address submitter) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    StoreSwitch.popFromField(_tableId, _keyTuple, 4, 1);
  }

  /** Pop a slice from imageUri (using the specified store) */
  function popImageUri(IStore _store, bytes32 hackathonId, address submitter) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    _store.popFromField(_tableId, _keyTuple, 4, 1);
  }

  /** Update a slice of imageUri at `_index` */
  function updateImageUri(bytes32 hackathonId, address submitter, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    StoreSwitch.updateInField(_tableId, _keyTuple, 4, _index * 1, bytes((_slice)));
  }

  /** Update a slice of imageUri (using the specified store) at `_index` */
  function updateImageUri(
    IStore _store,
    bytes32 hackathonId,
    address submitter,
    uint256 _index,
    string memory _slice
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    _store.updateInField(_tableId, _keyTuple, 4, _index * 1, bytes((_slice)));
  }

  /** Get the full data */
  function get(bytes32 hackathonId, address submitter) internal view returns (SubmissionData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(
    IStore _store,
    bytes32 hackathonId,
    address submitter
  ) internal view returns (SubmissionData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    bytes32 hackathonId,
    address submitter,
    uint256 votes,
    uint256 withdrawalPrize,
    string memory name,
    string memory uri,
    string memory imageUri
  ) internal {
    bytes memory _data = encode(votes, withdrawalPrize, name, uri, imageUri);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 hackathonId,
    address submitter,
    uint256 votes,
    uint256 withdrawalPrize,
    string memory name,
    string memory uri,
    string memory imageUri
  ) internal {
    bytes memory _data = encode(votes, withdrawalPrize, name, uri, imageUri);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(bytes32 hackathonId, address submitter, SubmissionData memory _table) internal {
    set(hackathonId, submitter, _table.votes, _table.withdrawalPrize, _table.name, _table.uri, _table.imageUri);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 hackathonId, address submitter, SubmissionData memory _table) internal {
    set(_store, hackathonId, submitter, _table.votes, _table.withdrawalPrize, _table.name, _table.uri, _table.imageUri);
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal view returns (SubmissionData memory _table) {
    // 64 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 64));

    _table.votes = (uint256(Bytes.slice32(_blob, 0)));

    _table.withdrawalPrize = (uint256(Bytes.slice32(_blob, 32)));

    // Store trims the blob if dynamic fields are all empty
    if (_blob.length > 64) {
      uint256 _start;
      // skip static data length + dynamic lengths word
      uint256 _end = 96;

      _start = _end;
      _end += _encodedLengths.atIndex(0);
      _table.name = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));

      _start = _end;
      _end += _encodedLengths.atIndex(1);
      _table.uri = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));

      _start = _end;
      _end += _encodedLengths.atIndex(2);
      _table.imageUri = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));
    }
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    uint256 votes,
    uint256 withdrawalPrize,
    string memory name,
    string memory uri,
    string memory imageUri
  ) internal view returns (bytes memory) {
    uint40[] memory _counters = new uint40[](3);
    _counters[0] = uint40(bytes(name).length);
    _counters[1] = uint40(bytes(uri).length);
    _counters[2] = uint40(bytes(imageUri).length);
    PackedCounter _encodedLengths = PackedCounterLib.pack(_counters);

    return
      abi.encodePacked(
        votes,
        withdrawalPrize,
        _encodedLengths.unwrap(),
        bytes((name)),
        bytes((uri)),
        bytes((imageUri))
      );
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(bytes32 hackathonId, address submitter) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 hackathonId, address submitter) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 hackathonId, address submitter) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = hackathonId;
    _keyTuple[1] = bytes32(uint256(uint160(submitter)));

    _store.deleteRecord(_tableId, _keyTuple);
  }
}
